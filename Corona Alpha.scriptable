{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "deep-gray",
    "glyph" : "vial"
  },
  "name" : "Corona Alpha",
  "script" : "\/\/ Corona Alpha v1.0 - by unvsDev\n\/\/ Full-fledged Covid-19 Information for Korea\n\/\/ Learn more: https:\/\/github.com\/unvsDev\/corona-alpha\n\nconst dataURL = \"https:\/\/apiv2.corona-live.com\/stats.json\"\nconst data = await new Request(dataURL).loadJSON()\nconst sourceURL = \"https:\/\/corona-live.com\"\n\nconst today = new Date()\n\nconst orgData = {\n  region : 0,\n  alert : 0,\n  limit : 100,\n  hour : 1\n}\n\nconst regionsArr = ['서울', '부산', '인천', '대구', '광주', '대전', '울산', '세종', '경기', '강원', '충북', '충남', '경북', '경남', '전북', '전남', '제주']\n\nconst alertArr = ['끄기', '확진자 증가 알림', '매 시간마다 알림']\n\nvar resetmode = 0\n\nlet fm = FileManager.iCloud()\nconst prefPath = fm.joinPath(fm.documentsDirectory(), \"coronaAlpha.txt\")\nconst prevPath = fm.joinPath(fm.documentsDirectory(), \"coronaData.txt\")\n\nif(!fm.fileExists(prefPath)){\n  let alert = new Alert()\n  alert.title = \"환영합니다!\"\n  alert.message = \"대한민국 코로나19 확진자 현황을\\n위젯을 통해 직관적으로 보여주는\\n코로나 알파에 오신 것을 환영합니다 💜\\nDeveloped by unvsDev\"\n  alert.addAction(\"확인\")\n  await alert.present()\n  fm.writeString(prefPath, JSON.stringify(orgData))\n}\n\nif(config.runsInApp) {\n  var usrData = JSON.parse(fm.readString(prefPath))\n  let menu = new UITable()\n  menu.showSeparators = true\n  \n  const option1 = new UITableRow()\n  option1.dismissOnSelect = false\n  option1.addText(\"🇰🇷 라이브 지역 설정\")\n  menu.addRow(option1)\n  \n  option1.onSelect = async (number) => {\n    let regionMenu = new UITable()\n    regionMenu.showSeparators = true\n    for(reg in regionsArr){\n      const regOption = new UITableRow()\n      regOption.dismissOnSelect = true\n      regOption.addText(regionsArr[reg])\n      regionMenu.addRow(regOption)\n      \n      regOption.onSelect = async (number) => {\n        usrData[\"region\"] = number\n        let regAlert = new Alert()\n        regAlert.title = \"라이브 지역 설정\"\n        regAlert.message = \"지역이 \" + regionsArr[number] + \"(으)로 설정되었습니다.\"\n        regAlert.addAction(\"확인\")\n        await regAlert.present()\n      }\n    }\n    await regionMenu.present(false)\n  }\n  \n  const option2 = new UITableRow()\n  option2.dismissOnSelect = false\n  option2.addText(\"🤖 실시간 알림 설정\")\n  menu.addRow(option2)\n  \n  option2.onSelect = async () => {\n    let alAlert = new Alert()\n    alAlert.title = \"실시간 알림\"\n    alAlert.message = \"알림 여부를 선택해주세요.\\n현재 설정값은 \\\"\" + alertArr[usrData.alert] + \"\\\" 입니다!\"\n    for(opt in alertArr){\n      alAlert.addAction(alertArr[opt])\n    }\n    var choice = await alAlert.present()\n    usrData.alert = choice\n  }\n  \n  const option3 = new UITableRow()\n  option3.dismissOnSelect = false\n  option3.addText(\"📈 확진자 증가폭 설정 (알림)\")\n  menu.addRow(option3)\n  \n  option3.onSelect = async () => {\n    if(usrData.alert == 1){\n      let limAlert = new Alert()\n      limAlert.title = \"증가폭 설정\"\n      limAlert.message = \"알림을 수신할 최소 증가폭을 설정하세요.\\n효율적인 수신은 100~200명을 추천합니다.\\n현재 설정값은 \\\"\" + usrData.limit.toString() + \"명\\\" 입니다!\"\n      \n      limAlert.addTextField(\"증가폭 입력\", usrData[\"limit\"].toString())\n      limAlert.addAction(\"확인\")\n      limAlert.addCancelAction(\"취소\")\n      if(await limAlert.present() != -1){\n        usrData.limit = parseInt(limAlert.textFieldValue())\n      }\n    } else {\n      let limAlert = new Alert()\n      limAlert.title = \"음.. 🤔\"\n      limAlert.message = \"증가폭 알림만 설정 가능한 옵션입니다.\"\n      limAlert.addAction(\"확인\")\n      await limAlert.present()\n    }\n  }\n  \n  const option4 = new UITableRow()\n  option4.dismissOnSelect = false\n  option4.addText(\"⏰ 고정 시간 간격 설정 (알림)\")\n  menu.addRow(option4)\n  \n  option4.onSelect = async () => {\n    if(usrData.alert == 2){\n      let hrAlert = new Alert()\n      hrAlert.title = \"시간 간격 설정\"\n      hrAlert.message = \"알림을 수신할 시간 간격(시간)을 설정하세요.\\n효율적인 수신은 1시간을 추천합니다.\\n현재 설정값은 \\\"\" + usrData.hour.toString() + \"시간\\\" 입니다!\"\n      \n      hrAlert.addTextField(\"시간 간격 입력\", usrData[\"hour\"].toString())\n      \n      hrAlert.addAction(\"확인\")\n      hrAlert.addCancelAction(\"취소\")\n      if(await hrAlert.present() != -1){\n        usrData.hour = parseInt(hrAlert.textFieldValue())\n      }\n    } else {\n      let hrAlert = new Alert()\n      hrAlert.title = \"음.. 🤔\"\n      hrAlert.message = \"매시간 알림만 설정 가능한 옵션입니다.\"\n      hrAlert.addAction(\"확인\")\n      await hrAlert.present()\n    }\n  }\n  \n  const option5 = new UITableRow()\n  option5.dismissOnSelect = true\n  option5.addText(\"🔥 데이터 초기화\")\n  menu.addRow(option5)\n  \n  option5.onSelect = async () => {\n    resetmode = 1\n    let resetAlert = new Alert()\n    resetAlert.title = \"정말요..? 😭\"\n    resetAlert.message = \"타노스가 데이터를 대신 삭제해주기 때문에, 절대 되돌릴 수 없어요! 정말 초기화하시겠어요?\"\n    resetAlert.addDestructiveAction(\"초기화\")\n    resetAlert.addCancelAction(\"취소\")\n    \n    if(await resetAlert.present() != -1){\n      fm.remove(prefPath)\n      if(fm.fileExists(prevPath)){\n        fm.remove(prevPath)\n      }\n    }\n  }\n  \n  const option6 = new UITableRow()\n  option6.dismissOnSelect = false\n  option6.addText(\"🎄 Github\")\n  menu.addRow(option6)\n  \n  option6.onSelect = () => {\n    Safari.openInApp(\"https:\/\/github.com\/unvsDev\/corona-alpha\", false)\n  }\n  \n  await menu.present(false)\n  \n  fm.writeString(prefPath, JSON.stringify(usrData))\n}\n\nif(resetmode){ return 0 }\n\nvar aftData = JSON.parse(fm.readString(prefPath))\n\n\/\/ Getting Data\nlet overview = data[\"overview\"]\nlet regionData = data[\"current\"][aftData.region.toString()][\"cases\"]\n\nvar currentCnt = overview[\"current\"][0]\nvar currentGap = overview[\"current\"][1]\nvar totalCnt = overview[\"confirmed\"][0]\nvar totalGap = overview[\"confirmed\"][1]\nvar regionCnt = regionData[0]\nvar regionGap = regionData[1]\n\nconst incColor = new Color(\"#ff3800\")\nconst decColor = new Color(\"#32d9cb\")\n\nfunction getGapStr(number) {\n  var result = new String(\"코로나19에 맞서 열심히 싸워주시는 의료진분들께 진심으로 감사드립니다 👍\") \/\/ Easter Egg!\n  if(number == 0) {\n    return result = \"0\"\n  } else if(number > 0) {\n    return result = \"+\" + addComma(number)\n  } else {\n    return result = addComma(number)\n  }\n}\n\nfunction getGapColor(number) {\n  if(number <= 0) {\n    return decColor\n  } else {\n    return incColor\n  }\n}\n\nasync function writeCovidReport() {\n  await fm.writeString(prevPath, JSON.stringify({\"date\":today.getDate(), \"hour\":today.getHours(), \"confirmed\":currentCnt}))\n  console.log(\"[*] 로그 저장이 완료되었습니다!\")\n}\n\nasync function sendNotification(title, message){\n  let noti = new Notification()\n  noti.title = title\n  noti.body = message\n  await noti.schedule()\n}\n\nif(aftData.alert == 1){ \/\/ 확진자 증가폭 알림\n  if(!fm.fileExists(prevPath)){\n    await writeCovidReport()\n    await sendNotification(\"확진자 증가폭 알림\", \"이전 데이터가 없어 최초 1회는 알림이 오지 않습니다.\")\n  } else {\n    var prevData = JSON.parse(fm.readString(prevPath))\n    var diff = currentCnt - prevData.confirmed\n    if(diff >= aftData.limit) { \n      await sendNotification(\"코로나19 확진자 +\" + diff + \"명\", \"현재까지 총 확진자는 \" + currentCnt + \"명입니다.\\n손씻기 생활화, 어디서든 마스크 착용을 통해 코로나를 이겨내요! 😎\")\n      await writeCovidReport()\n    }\n  }\n}\n\nif(aftData.alert == 2){ \/\/ 매시간 확진자 알림\n  if(!fm.fileExists(prevPath)){\n    await writeCovidReport()\n    await sendNotification(\"매시간 확진자 알림\", \"이전 데이터가 없어 최초 1회는 알림이 오지 않습니다.\")\n  } else {\n    var prevData = JSON.parse(fm.readString(prevPath))\n    var lastDate = prevData.date\n    var lastHour = prevData.hour\n    if(today.getDate() != lastDate){\n      await sendNotification(\"코로나19 어제 확진자 최소 \" + prevData.confirmed + \"명\", \"손씻기 생활화, 어디서든 마스크 착용을 통해 코로나를 이겨내요! 😎\")\n      await writeCovidReport()\n    }else if(today.getHours() != lastHour){\n      var diff = currentCnt - prevData.confirmed\n      await sendNotification(\"코로나19 \" + today.getHours() + \"시 기준 +\" + diff + \"명\", \"현재까지 총 확진자는 \" + currentCnt + \"명입니다.\\n손씻기 생활화, 어디서든 마스크 착용을 통해 코로나를 이겨내요! 😎\")\n      await writeCovidReport()\n    }\n  }\n}\n\n\/\/ Widget Layout\nlet cwidget = new ListWidget()\n\nlet title = cwidget.addText(\"CORONA ALPHA\")\ntitle.textColor = new Color(\"#fff\")\ntitle.font = Font.blackMonospacedSystemFont(8)\n\ncwidget.addSpacer(5)\n\nlet cStack1 = cwidget.addStack()\ncStack1.layoutHorizontally()\ncStack1.centerAlignContent()\n\nlet inStack1 = cStack1.addStack()\ninStack1.layoutVertically()\ninStack1.centerAlignContent()\n\nlet liveTitle = inStack1.addText(\"라이브\")\nliveTitle.textColor = new Color(\"#fff\")\nliveTitle.font = Font.blackMonospacedSystemFont(10)\n\nlet liveCompare = inStack1.addText(getGapStr(currentGap))\nliveCompare.textColor = getGapColor(currentGap)\nliveCompare.font = Font.boldMonospacedSystemFont(8)\n\ncStack1.addSpacer()\n\nlet liveLabel = cStack1.addText(addComma(currentCnt))\nliveLabel.textColor = new Color(\"#fff\")\nliveLabel.font = Font.boldMonospacedSystemFont(27)\n\nlet cStack2 = cwidget.addStack()\ncStack2.layoutHorizontally()\ncStack2.centerAlignContent()\n\nlet inStack2 = cStack2.addStack()\ninStack2.layoutVertically()\ninStack2.centerAlignContent()\n\nlet localTitle = inStack2.addText(regionsArr[aftData.region])\nlocalTitle.textColor = new Color(\"#fff\")\nlocalTitle.font = Font.blackMonospacedSystemFont(10)\n\nlet localCompare = inStack2.addText(getGapStr(regionGap))\nlocalCompare.textColor = getGapColor(regionGap)\nlocalCompare.font = Font.boldMonospacedSystemFont(8)\n\ncStack2.addSpacer()\n\nlet localLabel = cStack2.addText(addComma(regionCnt))\nlocalLabel.textColor = new Color(\"#fff\")\nlocalLabel.font = Font.boldMonospacedSystemFont(27)\n\nlet cStack3 = cwidget.addStack()\ncStack3.layoutHorizontally()\ncStack3.centerAlignContent()\n\nlet inStack3 = cStack3.addStack()\ninStack3.layoutVertically()\ninStack3.centerAlignContent()\n\nlet totalTitle = inStack3.addText(\"총합\")\ntotalTitle.textColor = new Color(\"#fff\")\ntotalTitle.font = Font.blackMonospacedSystemFont(10)\n\nlet totalCompare = inStack3.addText(getGapStr(totalGap))\ntotalCompare.textColor = getGapColor(totalGap)\ntotalCompare.font = Font.boldMonospacedSystemFont(8)\n\ncStack3.addSpacer()\n\nlet totalLabel = cStack3.addText(addComma(totalCnt))\ntotalLabel.textColor = new Color(\"#fff\")\ntotalLabel.font = Font.boldMonospacedSystemFont(27)\n\ncwidget.addSpacer(5)\n\nfunction formatTime(date) {\n    let df = new DateFormatter()\n    df.useNoDateStyle()\n    df.useShortTimeStyle()\n    return df.string(date)\n}\n\nlet updateLabel = cwidget.addText(\"업데이트: \" + formatTime(today))\nupdateLabel.textColor = new Color(\"#fff\")\nupdateLabel.font = Font.systemFont(8)\nupdateLabel.textOpacity = 0.7\n\nfunction addComma(number) {\n  return number.toString().replace(\/\\B(?=(\\d{3})+(?!\\d))\/g, ',')\n}\n\ncwidget.refreshAfterDate = new Date(Date.now() + 1000 * 90) \/\/ Refresh every 90 Second\n\ncwidget.url = sourceURL\ncwidget.setPadding(12, 12, 12, 12)\ncwidget.backgroundColor = new Color(\"#333\")\ncwidget.presentSmall()\nScript.complete()",
  "share_sheet_inputs" : [

  ]
}